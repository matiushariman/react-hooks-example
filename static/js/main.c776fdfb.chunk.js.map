{"version":3,"sources":["logo.svg","Counter/index.js","ToDo/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","_useState","useState","_useState2","Object","slicedToArray","count","setCount","react_default","a","createElement","onClick","ToDo","todos","addTodo","_useState3","_useState4","newTodo","writeNewTodo","map","todo","i","key","concat","type","value","onChange","e","target","disabled","toConsumableArray","App","view","setView","className","src","logo","alt","width","height","src_Counter","src_ToDo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCazBC,MAXR,WAAmB,IAAAC,EACEC,mBAAS,GADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjBK,EADiBH,EAAA,GACVI,EADUJ,EAAA,GAGxB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBAAWJ,GACXE,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMJ,EAASD,EAAQ,KAAxC,sBCqBSM,MA3BR,WAAgB,IAAAX,EACIC,mBAAS,CAAC,yBADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdY,EADcV,EAAA,GACPW,EADOX,EAAA,GAAAY,EAEWb,mBAAS,IAFpBc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAEdE,EAFcD,EAAA,GAELE,EAFKF,EAAA,GAIrB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UACGG,EAAMM,IAAI,SAACC,EAAMC,GAAP,OACTb,EAAAC,EAAAC,cAAA,MAAIY,IAAG,GAAAC,OAAKH,EAAL,KAAAG,OAAaF,IAAMD,MAG9BZ,EAAAC,EAAAC,cAAA,SACEc,KAAK,OACLC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAaS,EAAEC,OAAOH,UAEvCjB,EAAAC,EAAAC,cAAA,UACEmB,SAAsB,KAAZZ,EACVN,QAAS,kBAAMG,EAAO,GAAAS,OAAAnB,OAAA0B,EAAA,EAAA1B,CAAKS,GAAL,CAAYI,OAFpC,SCiBSc,MA9Bf,WAAe,IAAA9B,EACWC,mBAAS,GADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN+B,EADM7B,EAAA,GACA8B,EADA9B,EAAA,GAGb,OACEK,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAA,OACEyB,IAAKC,IACLF,UAAU,WACVG,IAAI,OACJC,MAAM,MACNC,OAAO,SAGX/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,iBACb1B,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMsB,EAAQ,KAA/B,gBACAzB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMsB,EAAQ,KAA/B,eAGJzB,EAAAC,EAAAC,cAAA,WACY,IAATsB,GAAcxB,EAAAC,EAAAC,cAAC8B,EAAD,MACL,IAATR,GAAcxB,EAAAC,EAAAC,cAAC+B,EAAD,UCjBLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c776fdfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\n\nexport function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Set Count</button>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useState } from 'react';\n\nexport function ToDo() {\n  const [todos, addTodo] = useState(['learning React Hooks']);\n  const [newTodo, writeNewTodo] = useState('');\n\n  return (\n    <div>\n      <p>Thing(s) to do today</p>\n      <ul>\n        {todos.map((todo, i) => (\n          <li key={`${todo}-${i}`}>{todo}</li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        value={newTodo}\n        onChange={e => writeNewTodo(e.target.value)}\n      />\n      <button\n        disabled={newTodo === ''}\n        onClick={() => addTodo([...todos, newTodo])}\n      >\n        Add\n      </button>\n    </div>\n  );\n}\n\nexport default ToDo;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from './Counter';\nimport ToDo from './ToDo';\n\nfunction App() {\n  const [view, setView] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          src={logo}\n          className=\"App-logo\"\n          alt=\"logo\"\n          width=\"100\"\n          height=\"100\"\n        />\n      </header>\n      <div>\n        <div>\n          <div className=\"App-btn-group\">\n            <button onClick={() => setView(0)}>Counter View</button>\n            <button onClick={() => setView(1)}>Todo View</button>\n          </div>\n        </div>\n        <div>\n          {view === 0 && <Counter />}\n          {view === 1 && <ToDo />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}